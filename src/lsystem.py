"""
CSAPX Lab 1: L-system drawing generator

A program that combines a string rewriting L-system and an interpreter
to generate 2D drawings using the 2D turtle graphics library.

author: Mia McSwain
instructor: Sean Strout
"""
import turtle


def find_rule(s, rules):
    """
    Checks if the entered symbol has a corresponding rule. If the symbol does have an attached rule, return the rule. Otherwise, return the symbol.
    :param s: Symbol from alphabet
    :param rules: List of production rules
    :return: Returns either the successor of the rule if a rule applies to the symbol, and returns the symbol otherwise
    """
    for rule in rules:
        if rule[0] == s:
            return rule.split('=')[1].strip()
    return s

def apply_lsystem(ax, pro_rules, steps):
    """
    Goes through the given string, applying any applicable production rules.
    Continues this process for the specified number of steps, before returning the generated string.
    :param ax: Initial String
    :param pro_rules: The production rules each step with follow
    :param steps: How many times the production rules will be applied
    :return: Returns the string generated after applying the L-system the specified number of steps
    """
    current = ax
    for step in range(steps-1):
        result = ""
        for c in current:
            r_string = find_rule(c, pro_rules)
            result += r_string
        current = result
    return result

def evaluate(sequence, dis, ang, head):
    """
    Applies the L-system's alphabet to the turtle, allowing it to move in a variety of ways
    :param sequence: The string being iterated through
    :param dis: The amount the turtle will travel forward
    :param ang: The angle the turtle will rotate
    :param head: The angle the turtle begins at
    :return: None
    """
    save_stack = []
    current_save = []
    turtle.pendown()
    turtle.setheading(head)
    for i in range(len(sequence)):
        char = sequence[i]
        if char == "F" or char == "G":
            turtle.forward(dis)
            print("forward({})".format(dis))
        elif char == 'f':
            turtle.penup()
            print("pen up")
            turtle.forward(dis)
            print("forward({})".format(dis))
            turtle.pendown()
            print("pen down")
        elif char == '+':
            turtle.left(ang)
            print("left({})".format(ang))
        elif char == '-':
            turtle.right(ang)
            print("right({})".format(ang))
        elif char == '[':
            current_save = [round(turtle.xcor(),2), round(turtle.ycor(),2), turtle.heading(), dis, turtle.pensize()]
            save_stack.append(current_save)
            print("saving turtle's state ...\n\t position: ({},{})\n\t heading: {}\n\t line segment's length: {}\n\t pen size: {}"
                  .format(current_save[0], current_save[1], current_save[2], current_save[3], current_save[4]))
        elif char == ']':
            print(
                "restoring turtle's state ...\n\t position: ({},{})\n\t heading: {}\n\t line segment's length: {}\n\t pen size: {}"
                .format(current_save[0], current_save[1], current_save[2], current_save[3], current_save[4]))
            turtle.goto(current_save[0],current_save[1])
            turtle.setheading(current_save[2])
            dis = current_save[3]
            turtle.pensize(current_save[4])
            save_stack.pop()
            if len(save_stack) > 0:
                current_save = save_stack[-1]
            else:
                current_save = []
        elif char == '@':
            dis *= float(sequence[i + 1:i + 5])
        elif char == '#':
            turtle.pensize(int(sequence[i + 1:i + 3]))
            print("pensize({})".format(turtle.pensize()))


def main() -> None:
    """
    The main loop responsible for getting the input details from the user,
    printing in the standard output the resulting string generated by the L-system
    and drawing its graphical representation
    :return: None
    """
    print("Welcome to the L-system drawing generator!")
    axiom = input("Enter axiom (initial string): ")
    num_rules = int(input("Enter the number of rules: "))
    rule_list = []
    for r in range(num_rules):
        rule_list.append(input("Enter rule #"+ str(r) + ": "))
    angle = int(input("Enter angle of rotation: "))
    length = float(input("Enter initial line segment's length: "))
    heading = int(input("Enter initial heading: "))
    steps = int(input("Enter number of steps: "))
    print("Generating the string ...")
    print("Result:")
    print(apply_lsystem(axiom, rule_list, steps))
    print ("Drawing ...")
    evaluate(apply_lsystem(axiom, rule_list, steps), length, angle, heading)
    turtle.mainloop()

if __name__ == '__main__':
    main()